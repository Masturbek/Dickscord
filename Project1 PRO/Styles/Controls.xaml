<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Стиль для кнопки, который лишь отобразит контент, без заднего фона, выделения и прочего -->
    <Style x:Key="Button.Transparent" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent" Cursor="Hand">
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
        Некий стиль с анимацией.
        Его задача - анимировать контент кнопки при наведении мыши.
    -->
    <Style x:Key="Button.Animation" TargetType="Button" BasedOn="{StaticResource Button.Transparent}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To=".7" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Применяем ко всем кнопкам без стилей анимации и делаем их без фона. -->
    <Style TargetType="Button" BasedOn="{StaticResource Button.Animation}"/>

    <!-- Стиль для кнопки "Войти". Раньше был отдельный контрол, но зачем, если можно сделать простой стиль. -->
    <Style x:Key="Button.Auth.Big" TargetType="Button" BasedOn="{StaticResource Button.Animation}">
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Foreground" Value="#FFD7DDF2"/>
        <Setter Property="Background" Value="#FF697EC9"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Padding" Value="7"/>
        <Setter Property="Border.CornerRadius" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="{TemplateBinding Border.CornerRadius}" 
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            Cursor="Hand">
                        <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        <!--<TextBlock Margin="7,3.25,7,7" TextWrapping="Wrap" Text="Войти" TextAlignment="Center" FontWeight="Bold" FontSize="24" Foreground="#FFD7DDF2"/>-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBox.Auth" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="#FF303339"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="#FFCCCDCE"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Border.CornerRadius" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" Padding="5" CornerRadius="{TemplateBinding Border.CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="GotFocus">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#FF6473BE" Duration="0:0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="LostFocus">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#FF000000" Duration="0:0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>